<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.CatchJob.dao.ReviewDao">
	<!-- 리뷰 등록 -->
	<insert id="insertReview" parameterType="review">
		INSERT INTO REVIEW_TB (ENT_IDX,MBER_IDX,QESTN_NO,`CONTENTS`,EVALUATION,REVW_FL,REG_DT)
		VALUES (#{entIndex},${mberIndex},#{questionNum},#{contents},#{evaluationScore},#{reviewFlag},sysdate())
	</insert>
	
	<!-- 리뷰 삭제상태로 만들기 -->
	<update id="deleteReview" parameterType="map">
		UPDATE REVIEW_TB
		SET REVW_FL = #{REVW_FL}
		WHERE ENT_IDX=#{entIndex} AND MBER_IDX=${mberIndex} AND QESTN_NO=#{questionNum}	
	</update>
	<select id="selectReview" parameterType="String" resultMap="reviewMap">
		SELECT * FROM REVIEW_TB 
		WHERE REVW_IDX=#{reviewIndex};
	</select>
	
	<!-- 질문가져오기 -->
	<select id="question" parameterType="map"  resultType="map">
	<!-- SELECT qes.QESTN_NO, qes.QUESTION, count(rev.QESTN_NO) as COUNT, sum(rev.EVALUATION) as SUM, round(avg(rev.EVALUATION),1) as AVG -->
		SELECT qes.QESTN_NO, qes.QUESTION, count(rev.QESTN_NO) as COUNT, sum(rev.EVALUATION) as SUM, if(rev.EVALUATION is null, 0.0,round(avg(rev.EVALUATION),1) ) as AVG
		FROM   REVIEW_QESTN_TB qes
		LEFT OUTER JOIN REVIEW_TB rev
		ON qes.QESTN_NO = rev.QESTN_NO
		AND rev.ENT_IDX=#{ENT_IDX} 
		AND rev.REVW_FL=#{REVW_FL} 
		GROUP BY qes.QESTN_NO
		ORDER BY qes.QESTN_NO	
	</select>
	<!-- 수정/삭제페이지에서 뿌려줄 데이터  -->
	<select id="reviewListByMember" parameterType="map" resultMap="reviewMap">
		SELECT  e.ENT_IDX,e.ENT_NM, q.QESTN_NO, q.QUESTION, r.REG_DT
		FROM REVIEW_QESTN_TB q
		LEFT JOIN REVIEW_TB r
		ON r.QESTN_NO=q.QESTN_NO
		LEFT JOIN ENTERPRISE_TB e		
		ON r.ENT_IDX=e.ENT_IDX
		WHERE r.MBER_IDX=#{MBER_IDX} AND r.REVW_FL = #{REVW_FL}
		ORDER BY r.REVW_IDX desc
	</select>
	<!-- 수정 할 데이터 가져오기 -->
	<select id="selectOneReview" parameterType="map" resultMap="reviewMap">
		SELECT e.ENT_NM, q.QUESTION, r.*
		FROM REVIEW_QESTN_TB q
		LEFT JOIN REVIEW_TB r
		ON r.QESTN_NO=q.QESTN_NO
		LEFT JOIN ENTERPRISE_TB e		
		ON r.ENT_IDX=e.ENT_IDX
		WHERE r.MBER_IDX=#{mberIndex} AND e.ENT_IDX=#{entIndex} AND q.QESTN_NO=#{questionNum} AND r.REVW_FL = #{REVW_FL}	
	</select> 
 	<!-- 리뷰코멘트 VIEW 페이지에서 페이징처리 -->
	<select id="selectReviewsList" parameterType="map" resultMap="reviewMap">
		SELECT 		* 
		FROM 		REVIEW_TB revw
		INNER JOIN 	MEMBER_TB m
		ON 			revw.MBER_IDX = m.MBER_IDX
		WHERE 		revw.ENT_IDX= #{ENT_IDX} 
		AND 		revw.QESTN_NO= #{QESTN_NO} 
		AND 		revw.REVW_FL = #{REVW_FL}
		ORDER BY 	FIELD(m.MBER_TYPE,'ROLE_AUTHENTICATED','ROLE_USER'), revw.REG_DT DESC
		LIMIT 		#{NUM_OF_RVW_PER_PAGE}
		OFFSET 		#{START_ROW}
	</select>
	 
	 <select id="selectReviewTotalRows" parameterType="map" resultType="int">
		SELECT 	 count(*) AS TOTAL_ROWS 
		FROM	 REVIEW_TB
		WHERE	 ENT_IDX=#{ENT_IDX} AND QESTN_NO=#{QESTN_NO} AND REVW_FL = #{REVW_FL}
	</select>
	
	<select id="selectCountByKeyword" resultType="int" parameterType="map">
		SELECT COUNT(*)
		FROM REVIEW_TB r
			INNER JOIN MEMBER_TB m 
			ON r.MBER_IDX = m.MBER_IDX
			INNER JOIN ENTERPRISE_TB e
			ON r.ENT_IDX = e.ENT_IDX 
			WHERE 1=1 
		<if test="entIndexKeyword != null">
			AND r.ENT_IDX = #{entIndexKeyword} 
	    </if>
	    <if test="entNameKeyword != null"> 
	  	 	AND e.ENT_NM LIKE '%${entNameKeyword}%'
	    </if>
	    <if test="questionNumKeyword != null"> 
	  	  	AND r.QESTN_NO = #{questionNumKeyword} 
	    </if>
	</select>
	
	<select id="selectReviewList" resultMap="reviewMap"	parameterType="map">
		SELECT SQL_CALC_FOUND_ROWS *
		FROM REVIEW_TB r
		INNER JOIN MEMBER_TB m
		ON r.MBER_IDX = m.MBER_IDX
		INNER JOIN ENTERPRISE_TB e
		ON r.ENT_IDX = e.ENT_IDX
		WHERE 1=1
		<if test="entIndexKeyword != null">
			AND r.ENT_IDX = #{entIndexKeyword}
		</if>
		<if test="entNameKeyword != null">
			AND e.ENT_NM LIKE '%${entNameKeyword}%'
		</if>
		<if test="questionNumKeyword != null">
			AND r.QESTN_NO = #{questionNumKeyword}
		</if>
		ORDER BY REVW_IDX DESC
		LIMIT #{NUM_OF_MSG_PER_PAGE}
		OFFSET #{START_ROW}
	</select>
	
	<!-- 	리뷰 수정 -->
	<update id="updateReview" parameterType="review">
		UPDATE 	REVIEW_TB
		SET 	EVALUATION=#{evaluationScore}, CONTENTS=#{contents}, REVW_FL=#{reviewFlag}
		WHERE 	REVW_IDX=#{reviewIndex}
	</update>
	<update id="updateReviewByAdmin" parameterType="review">
		UPDATE  REVIEW_TB r 
				INNER JOIN MEMBER_TB m 
				ON r.MBER_IDX=m.MBER_IDX
		SET		m.MBER_ID=#{mberId},r.ENT_IDX=#{entIndex}, r.QESTN_NO=#{questionNum}, 
				r.EVALUATION=#{evaluationScore}, r.CONTENTS=#{contents}, r.REVW_FL=#{reviewFlag} 
		WHERE	r.REVW_IDX=#{reviewIndex}
	</update>
	<!-- 	기업의 리뷰 평점 최신화  -->
	<update id="updateEvaluationAvg" parameterType="int">
		UPDATE 	UPDATE_ENT_INFO_TB
		SET 	EVALUATION_AVG = (SELECT 	round(avg(EVALUATION),1) as AVG
								  FROM   	REVIEW_TB
								  WHERE 	ENT_IDX=#{ENT_IDX} AND REVW_FL=1 AND EVALUATION > 0)
		WHERE 	ENT_IDX = #{ENT_IDX}
	</update>
	
	<!-- 리뷰 작성시 중복 검사 -->
	<select id="reviewDuplicationCheck" parameterType="map" resultType="int">
		SELECT count(*) as COUNT
		FROM REVIEW_TB
		WHERE ENT_IDX=#{ENT_IDX} AND MBER_IDX=#{MBER_IDX} AND QESTN_NO=#{QESTN_NO} AND REVW_FL=#{REVW_FL}		
	</select>
	<!-- 리뷰 총 만족도 구하기 -->
	<select id="totalSatisfactionValue" parameterType="map" resultType="double">
		SELECT round(avg(EVALUATION),1) as AVG
		FROM REVIEW_TB
		WHERE ENT_IDX=${ENT_IDX} AND REVW_FL=${REVW_FL} AND EVALUATION > 0
	</select>
	
	<!-- 리뷰 항목별 만족도  -->
	<select id="valuesByItem" parameterType="map" resultType="map">
		SELECT qes.QESTN_NO as EVALUATION_NUM , count(rev.REVW_IDX) as COUNT
		FROM   REVIEW_QESTN_TB qes
		LEFT JOIN REVIEW_TB rev
		ON qes.QESTN_NO = rev.EVALUATION
		AND rev.ENT_IDX=${ENT_IDX}
		AND rev.REVW_FL=${REVW_FL}
		AND EVALUATION > 0
		GROUP BY qes.QESTN_NO 
		ORDER BY qes.QESTN_NO 
	</select>
	
	<resultMap type="review" id="reviewMap">
		<result property="entName" column="ENT_NM"/>
		<result property="question" column="QUESTION"/>
		<result property="mberId" column="MBER_ID"/>
		<result property="reviewIndex" column="REVW_IDX"/>		<!-- 리뷰 식별번호 -->
		<result property="entIndex" column="ENT_IDX"/>			<!--기업 식별번호  -->
		<result property="mberIndex" column="MBER_IDX"/>		<!-- 회원 식별번호 -->
		<result property="mberType" column="MBER_TYPE"/>		<!-- 회원 권한 -->
		<result property="questionNum" column="QESTN_NO"/>		<!-- 질문 식별번호 -->
		<result property="evaluationScore" column="EVALUATION"/>	<!-- 기업 평가 점수 -->
		<result property="contents" column="CONTENTS"/>		<!--  리뷰 내용-->
		<result property="reviewFlag" column="REVW_FL"/>		<!-- 리뷰 상태(1:사용,2:삭제,3:대기) TODO -->
		<result property="regDate" column="REG_DT"/>			<!-- 작성일 -->
	</resultMap>
</mapper>
